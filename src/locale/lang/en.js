export default {
  ht: {
    common: {
      add: 'add',
      delete: 'delete',
      copy: 'copy',
      seq: 'sequence',
      operation: 'operation',
      search: 'search',
      reset: 'reset',
      save: 'save',
      cancle: 'cancle',
      up: 'up',
      down: 'down',
      remove: 'remove',
      clear: 'clear',
      index: 'index',
      selected: 'selected',
      enter: 'Please enter ',
      toSearch: ' to search',
      errTip: 'Error tip',
      warmTips: 'Warm prompt',
      close: 'close',
      confirm: 'confirm',
      select: 'Please select',
      equal: 'equal',
      lessThan: 'less than',
      greaterThan: 'greater than',
      lessThanOrEqual: 'Less than or equal to',
      notEqual: 'Not equal to',
      like: 'be similar',
      left: 'left',
      right: 'right',
      isNull: 'Is empty',
      notNull: 'Nonempty',
      between: 'between',
      in: 'in',
      keyword: 'keyword',
      content: 'content',
      day: 'day',
      hour: 'hour',
      minute: 'minute',
      second: 'second',
      status: 'status',
      noMore: 'no more',
      searchFor: 'search',
      return: 'return',
      tips: 'tips',
    },
    tree: {
      filterText: 'keyword filter',
      collapse: 'collapse',
      expand: 'expand',
      refresh: 'refresh',
    },
    selectLang: {
      switchLang: 'switch lang',
    },
    file: {
      nopreview: 'no preview permission',
      forbiddenPreview:
        'Forbidden to preview attachments not uploaded successfully',
      download: 'download',
      preview: 'preview',
      sort: 'sort',
      confirmDelete: 'Are you sure you want to delete ?',
      fileName: 'Attachment name',
      fileType: 'Attachment type',
      fileSize: 'Attachment size',
      uploader: 'Uploader',
      accept: 'Support {acceptType} format',
      limitFileSize: 'File size does not exceed {size}',
      limitCount: 'The number of files does not exceed {limit}',
      all: 'All Formats',
      validateMsg: 'Please select a file within the specified range to upload!',
      fileDownloadError: 'Attachment download failed',
      confirmClear: 'Are you sure you want to empty?',
      fileAcceptType: 'Attachment format support',
      fileSizeLimit: 'Attachment size limit: no more than for a single file',
      fileCountLimit: 'Number limit of attachments: {limit} at most',
      fileSizeErrorMsg:
        'The size of the attachment is {computerSize}, which exceeds the maximum allowed size',
      fileLimitErrorMsg: 'A maximum of {limit} attachments can be uploaded',
      fileUploadErrorMsg: 'Failed to upload the attachment {fileName}',
    },
    date: {
      startDate: 'Start date',
      startTime: 'Start time',
      endDate: 'End date',
      endTime: 'End time',
      to: 'to',
      lastWeek: 'Last week',
      lastMonth: 'Last month',
      lastThreeMonths: 'The last three months',
    },
    picture: {
      uploadButtonText: 'upload',
      imgName: 'image name',
      imgUrl: 'image url',
      imgNamePlaceHolder: 'Please enter the picture name',
      imgUrlPlaceHolder: 'Please input the picture address',
      uploadWebImg: 'Upload Internet pictures',
      viewOriginalImage: 'View the original',
      limitCountTip: 'A maximum of {limit} images can be uploaded',
      limitTypeTip:
        'Please upload images with suffix JPG, PNG, GIF, ICO and JPEG',
      onlyUploadOne: 'Uploading multiple images is not supported',
      deleteTip: 'Confirm to {clear} picture?',
    },
    addQueryStrategy: {
      title: 'New Query Policy',
      strategyName: 'Policy Name',
      searchQuery: 'query criteria',
      addSearchQuery: 'Add Query Criteria',
      isDefault: 'Default',
      equalIgnoreCase: 'Equal to Ignore Case',
      errorMsg: 'Form validation failed, please check',
    },
    chart: {
      viewChart: 'view a chart',
      viewData: 'View Data',
    },
    customDialog: {
      title: 'Dynamic incoming parameter query',
      errorMsg: 'The dialog alias {alias} does not exist！',
      getIdError:
        'Exception in obtaining position ID, user ID and organization ID',
      postRequestParamError: 'POST parameter is not a valid JSON format',
      relationSearchNotBindField:
        'The associated query value parameter is not bound to a form field',
      dynamicIncomingParameterQuery: 'Dynamic incoming parameter query',
      searching: 'In Query...',
      customDialogWarnMsg:
        'The user-defined dialog box does not obtain the listKey returned by the data. The data loading may cause an exception.',
    },
    selector: {
      dimensionTitle: 'Select Dimension',
      nameCode: 'name,code',
      dialog: 'dialog',
      dimensionList: 'dimension list',
      jobTitle: 'Select Job Title',
      jobList: 'Job List',
      roleTitle: 'Select Role',
      orgTitle: 'Select Organization',
      orgDefaultPlaceholder: 'Name, code, path',
      orgList: 'Organization List',
      org: 'organization',
      tactics: 'strategy',
      not: 'not',
      MyDepartment: 'My main department',
      MyDepartmentAndSub: 'My main department and subordinate departments',
      myAllDepartment: 'All my departments',
      myAllDepartmentAndSub: 'All my departments and subordinate departments',
      notGetDepartmentData:
        'The department information of the current user is not obtained, and data cannot be loaded according to this policy.',
      postTitle: 'Select Position',
      postList: 'Position List',
      name: 'name',
      code: 'code',
      orgName: 'Affiliated organization',
      rolePlaceholder: 'Role name and code',
      roleList: 'Role List',
      notGetData: 'The data list is not obtained, and data cannot be selected.',
      userAndAccount: 'User name and account',
      userTitle: 'Select User',
      roleName: 'Role Name',
      all: 'whole',
      userList: 'User List',
      topContacts: 'Top contacts',
      role: 'role',
    },
    editor: {
      errorMsg:
        'To use rich text components, you must introduce wangeditor and install plug-ins hotent-ui/packages/plugins/wangeditor',
    },
    explain: {
      label: 'explain',
    },
    flowChart: {
      title: 'flow chart',
      taskApprovalDetail: 'task approval detail',
      taskName: 'task name',
      executor: 'executor',
      candidate: 'candidate',
      tooltipContent: 'users and user groups qualified for approval',
      approvalTime: 'approval time',
      opinion: 'opinion',
      nodeSettingDetails: 'Node Setting Details',
      notTask: 'No task generated',
      tentativeCandidate: 'Tentative Candidate',
      tentativeCandidateTip:
        'Tentative users and user groups with approval qualification. The actual candidates can be determined only after generating tasks',
      notApproval: 'To be approved',
      commit: 'Submit',
      recommit: 'Resubmit',
      agree: 'agree',
      suspend: 'Suspend',
      oppose: 'opposition',
      reject: 'reject',
      rejectToStart: 'Refund to the initiator',
      withdraw: 'withdraw',
      withdrawToPromoter: 'Withdrawal to initiator',
      countersignaturePassed: 'Countersigned',
      countersignatureNotPassed: 'Failed to countersign',
      manualTermination: 'Manual Termination',
      finish: 'finish',
    },
    global: {
      errorMsg: 'Error in association query',
      validateErrorMsg: 'Global verification 【{name}】 script error',
      subTableRequired: 'A record is required in the sub table',
      sunTableRequired: 'One record is required for Sun Table',
    },
    approvalHistory: {
      approvalNode: 'Approval node',
      pendingApprovers: 'Pending Approver',
      name: 'name',
      handler: 'Handled by',
      handlingSituation: 'Handling',
      notRead: 'To be read',
      read: 'Read',
      handleOpinion: 'Handling opinions',
      file: 'enclosure',
      operateTime: 'Operation time',
      stayTime: 'Length of stay',
      lessOneMinute: 'Less than 1 minute',
      approvalRecord: 'Approval record',
    },
    iframe: {
      notUrl: 'The current URL form address is not filled in.',
      errorMsg: 'The current URL form is not loaded correctly.',
    },
    image: {
      downloadErrorMsg: 'File download failed, please upload again',
    },
    input: {
      serialNumberErrorMsg:
        'The SN generation rule field cannot be bound to the SN display field',
    },
    map: {
      title: 'Map selection',
      clearMsg: 'Clear address data',
      longitude: 'longitude',
      latitude: 'latitude',
      nationwide: 'whole country',
      coordinate: 'coordinate',
      notMapComponent:
        'The map component is not currently imported, and the map cannot be loaded.',
    },
    onlineForm: {
      loadFormError:
        'The form failed to load. The form configuration may have changed. Please contact the administrator...',
    },
    preview: {
      tip: 'System error',
      back: 'Return to the previous page',
      defaultLoadingTip: 'Loading...',
      filePreview: 'Attachment preview',
      loadError: 'Error loading attachment to preview',
      notExistMsg: 'The attachment to preview does not exist',
      notSupported: 'The current attachment format does not support preview',
      notSupportedOnlinePreview:
        'Online preview of compressed files is not supported',
      notSupportedPlayVideo: 'Online video playback is not supported',
      notSupportedPreview: 'Preview is not supported',
      previewError: 'Preview failed',
      querySqlTip: 'View does not exist...',
    },
    qrCode: {
      tip: 'Please bind the mobile form',
    },
    rate: {
      tip: 'The value of the HtRate component must be a number or a string with a number value.',
    },
    relevantFlow: {
      flowSubject: 'Process topic',
      sponsor: 'Sponsor',
      originatingTime: 'Originating time',
      addFlowTitle: 'Add related processes',
      flowTitle: 'Process Title',
      placeholder: 'Please enter the process title',
      createTime: 'Creation time',
      creator: 'Created by',
      procDefName: 'Process name',
    },
    savaButton: {
      errorMsg:
        '{errorLength} fields failed verification. Please fill in the form correctly.',
    },
    select: {
      errorMsg: 'Multiple selection does not support number type',
    },
    slider: {
      tip: 'This control does not support PC side preview, please go to mobile side to check',
      errorMsg:
        'The value of the HtSlider component must be a number or a string with a number value.',
    },
    step: {
      pre: 'Previous step',
      next: 'next step',
    },
    subTable: {
      errorMsg: 'Please select data backfill',
      subTableError: 'One to one sub table can only select one piece of data',
      sunTableBackfillError:
        'The current row index of the sub table is not obtained, and the sub table cannot be backfilled',
      exceededMaximumRows:
        'Sub table data has exceeded the maximum number of rows',
      sunTableExceededMaximumRows:
        'The grandchild table data has exceeded the maximum number of rows',
      loadingText: 'Initializing the filling template...',
      getCustomDialogError: 'Failed to get custom dialog box!',
      getCurrentUserError:
        'Failed to obtain the filling unit of the current user!',
      getDefaultDataError: 'Failed to get initialization data!',
      subTableExport: 'Sub table export',
      currentPageData: 'Current Page Data',
      allData: 'All data',
      subTableData: 'Sub table data',
      xlsxWarnMsg:
        'To use the sub table import/export function, you need to install the XLSX plug-in',
      exportError: 'Data export failed',
      subTableImport: 'Sub table import',
      template: 'Download Template',
      importDialogTitle: 'Import sub table data',
      importFile: 'Import File',
      importModel: 'Import Mode',
      hasRead: 'Read to',
      strip: 'strip',
      data: 'data',
      checkDetail: 'Click to view details',
      notArrayError:
        'The rows property of the EipSubPagination component can only be passed into an array',
      subTableTemplate: 'Sub Table Template',
      append: 'Append import',
      override: 'Overwrite import',
      merge: 'Merge Import',
      downloadTemplateError: 'Template download failed',
      selectImportData: 'Please select a file to import',
      cannotImport:
        'The form data is not obtained, and the import cannot be completed',
      importSuccess: 'Import succeeded!',
      importError: 'Data import failed',
      notValidExcelFile: 'The selected file is not a valid Excel file',
      cannotHaveMergedCells:
        'Excel cannot have merged cells. Please check the data in row {rowNum}。',
      dataWrongFormat: 'The data read is in the wrong format.',
      upWarning: 'Is already the first in the list',
      downWarning: 'Is already the last in the list',
      subTablePathError: 'Incorrect path of sub table',
      sunTablePathError: "Sun Biao's path is wrong",
      clearAllTip: 'Confirm the operation?',
      cancelOperate: 'Operation canceled',
      deleteSunTableTip:
        'Sun table is required, and at least one record should be kept',
      deleteSubTableTip:
        'The sub table must be filled in and at least one record must be kept.',
    },
    table: {
      customColumn: 'Custom Columns',
      customColumnDesc:
        'Check the column to be displayed and set the width of the column.',
      required: 'Mandatory',
      width: 'width',
      restoreDefault: 'Restore Default',
      baseSearch: 'Basic Search',
      advanceSearch: 'Advanced Search',
      exportData: 'Export Data',
      refresh: 'refresh data',
      cardView: 'Card View',
      tableView: 'Tabular View',
      searchPlaceholder: 'Please enter the search content',
      validateErrorMsg:
        '{itemsLength} fields failed verification, please fill in the form content correctly.',
    },
    templateBatchUpdateDialog: {
      string: 'character string',
      errorMsg: 'There is still something left to fill in.',
    },
    templateForm: {
      formContent: 'Form Content',
    },
    templateImportResult: {
      title: 'Import Results',
      mainKey: 'Primary key',
      foreignKey: 'Foreign key',
      yes: 'yes',
      no: 'no',
      validOrNot: 'Valid or not',
      errorInfo: 'error message',
      duplicateOrNot: 'Duplicate or not',
      import: 'Import',
      importFail: 'Import failed',
      loadingText: 'Saving data',
    },
    templatePreview: {
      noDataText: 'Report does not exist...',
      errorMsg: 'Failed to get the form list template html',
      fileCount: '{fileListCount} attachments in total',
      imageCount: '{imageListCount} in total',
      selectSummary: 'Select Summary',
      allSummary: 'Total',
      currentPageSummary: 'Current Page Summary',
      templateTypeError: 'The upload template can only be in PDF format!',
      selectUploadFile: 'Please select the attachment to upload',
      uploadSuccess: 'Upload succeeded',
      selectExportField: 'Please select the field to export!',
      isFirst: 'Is already the first in the list',
      isLast: 'Is already the last in the list',
      total: 'total',
      notExist: 'This task has been processed or does not exist!',
      notSupported: 'Not supported temporarily!',
      selectLeastOneData: 'Please select at least one piece of data!',
      qrCode: 'QR code',
      copy: 'Content copied to clipboard!',
      copyError: 'Sorry, copy failed!',
      sortWarning:
        'The current sorting method handleSortChange has been deprecated. Please save the form list again.',
      deleteWaring: 'Please select the data to delete!',
      deleteTip:
        'This operation will delete the file. Do you want to continue?',
      cancelDelete: 'Deletion canceled',
      deleteDataTip:
        'This operation will delete the data, do you want to continue?',
      notUrl:
        'The viewReportURLHandler method is not provided in js to build the page access address',
      notGetMenu:
        'The menu page corresponding to {alias} is not obtained, please confirm whether it has been published as a front-end resource.',
      pageJumpFail: 'Page jump failed',
      isChangeDataTip: 'This data will be modified. Continue?',
      savaSuccess: 'Saving succeeded',
      savaFail: 'Save failed',
      hasCancelOperate: 'The operation was canceled',
      selectLeastOneDataToOperate:
        'Please select at least one data for operation!',
      notUpdate: 'Update content is not set',
      updateDataTip: 'This operation will update data in batches. Continue?',
      updateDataAllTip:
        'You have not selected any data. Are you sure to update all data?',
      cancelUpdate: 'Update canceled',
      selectOneDateTip: 'Please select a piece of data for operation!',
      selectOneData:
        'You have selected multiple pieces of data, please select one to operate!',
      copyTip:
        'This operation will copy a copy of the data. Do you want to continue?',
      copyLoadingText: 'Form copying',
      cancelCopy: 'Replication canceled',
      copyWaning: 'Please select data replication!',
      copyAllDataTip: 'This operation will copy the selected data. Continue?',
      applicationSideNotConfigured: 'The application side is not configured',
      notConfigured: 'Not configured in',
      hasRevoke: 'Has been withdrawn and cannot be withdrawn again',
      revokeReason: 'Please enter the withdrawal reason',
      deleteDraftSuccess: 'Successfully deleted draft',
      deleteDraftTip:
        'It cannot be restored after deletion. Are you sure you want to delete this process draft?',
      confirmDeleteTip: 'Confirm to delete this process?',
      importSuccess: 'Import succeeded',
      importAccount: 'Import account',
      importUser: 'Importer',
    },
    templateTaskCirculate: {
      title: 'Process circulation',
      circulators: 'Circulators',
      circulateExplain: 'Circulation instructions',
      placeholder: 'Please enter comments......',
      approvalOpinion: 'Approval comments',
      addCommonWord: 'Add common words',
      commonWord: 'Common Words',
      uploadFile: 'Attachment upload',
      validateErrorMsg:
        'The form verification failed. Please complete the form information',
      confirmMsg: 'Are you sure to add [{opinion}] as a common phrase?',
    },
    linkage: {
      objectIsEmpty: 'The object passed in is null or not of VueComponent type',
      typeError:
        'The passed in object {exp} is null, or is neither of type Object nor of type Array',
      getFormError: 'The form of the control is not obtained',
      appendValidationRulesError:
        'The validation rule {value} to be appended during linkage is neither String nor Object',
      decreaseValidationRulesError:
        'The validation rule {value} to be reduced during linkage is neither String nor Object',
    },
    onlineHottable: {
      loadingText: 'Getting initialization information...',
    },
    regionValidator: {
      errorMsg:
        'The element corresponding to selector {querySelector} was not found.',
    },
    validate: {
      jsError: 'Js script execution error',
    },
  },
}
